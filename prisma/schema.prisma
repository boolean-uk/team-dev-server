// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  role           Role          @default(STUDENT)
  profile        Profile?
  cohortId       Int?
  cohort         Cohort?       @relation(fields: [cohortId], references: [id])
  posts          Post[]
  deliveryLogs   DeliveryLog[]
  notesByTeacher Note[]        @relation("TeacherNotes")
  notes          Note[]        @relation("StudentNotes")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  postComments   PostComment[]
  postLikes      PostLike[]
  submissions  Submission[]  
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  teacher   User     @relation(name: "TeacherNotes", fields: [teacherId], references: [id])
  teacherId Int
  student   User     @relation(name: "StudentNotes", fields: [studentId], references: [id])
  studentId Int
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  firstName    String
  lastName     String
  bio          String?
  profileUrl   String?
  githubUrl    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  postComments PostComment[]
}

model Cohort {
  id           Int           @id @default(autoincrement())
  users        User[]
  cohortName   String        @unique
  deliveryLogs DeliveryLog[]
  startDate    DateTime     
  endDate      DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CohortExercise {
  id           Int           @id @default(autoincrement())
  name        String        
  url         String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  submissions Submission[]  
}

model Submission {
  id                 Int             @id @default(autoincrement())
  cohortExerciseId   Int
  cohortExercise     CohortExercise  @relation(fields: [cohortExerciseId], references: [id])        
  userId             Int
  user               User            @relation(fields: [userId], references: [id])        
  createdAt          DateTime        @default(now())
  updatedAt          DateTime     
}

model Post {
  id           Int           @id @default(autoincrement())
  content      String
  edited       Boolean       @default(false)
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  postComments PostComment[]
  postLikes    PostLike[]
}

model PostLike {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  postId       Int
  post         Post          @relation(fields: [postId], references: [id])
  active       Boolean       @default(false)
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(150)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryLog {
  id        Int               @id @default(autoincrement())
  date      DateTime
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  cohortId  Int
  cohort    Cohort            @relation(fields: [cohortId], references: [id])
  lines     DeliveryLogLine[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model DeliveryLogLine {
  id        Int         @id @default(autoincrement())
  content   String
  logId     Int
  log       DeliveryLog @relation(fields: [logId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
